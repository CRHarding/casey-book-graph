type User {
    id: ID!
    username: String
    email: String
    firstName: String
    lastName: String
    aboutMe: String
    password: String
    posts: [Post]!
}

type Post {
    id: ID!
    title: String
    postText: String
    numberOfLikes: Int
    numberOfComments: Int
    ableToView: Int
    userId: User!
}

type Mutation {
    createUser(input: CreateUserInput!): User!
    updateUser(input: UpdateUserInput!): User!
    deleteUser(input: ID!): Int!

    createPost(input: CreatePostInput!): Post!
    updatePost(input: UpdatePostInput!): Post!
    deletePost(input: ID!): Int!
}

type Query {
    findAllUsers: [User]
    findUserById(input: ID!): User

    findAllPosts: [Post]
    findPostById(input: ID!): Post
}

schema {
    query: Query
    mutation: Mutation
}

input UpdatePostInput {
    id: ID!
    title: String
    postText: String
    numberOfLikes: Int
    numberOfComments: Int
    ableToView: Int
    posterId: Int
}

input CreatePostInput {
    title: String
    postText: String
    numberOfLikes: Int
    numberOfComments: Int
    ableToView: Int
    posterId: Int
}

input UpdateUserInput {
    id: ID!
    username: String!
    firstName: String!
    lastName: String!
    email: String!
    aboutMe: String!
    password: String!
}

input CreateUserInput {
    username: String!
    firstName: String!
    lastName: String!
    email: String!
    aboutMe: String
    password: String!
}

input DeleteUserInput {
    id: ID
}